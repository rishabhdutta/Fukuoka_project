%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/duttar/Desktop/GIT_projects/Fukuoka_project/figures/figure7/faults1.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/07 20:04:05

%% Initialize variables.
filename = '/home/duttar/Desktop/GIT_projects/Fukuoka_project/figures/figure7/all_faults.txt';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%12s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
VarName1 = cell2mat(raw(:, 1));
VarName2 = cell2mat(raw(:, 2));

%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

fault1x = VarName1; fault1y = VarName2; 
numfaults = length(find(isnan(VarName1)==1)); 
indnan = find(isnan(VarName1)==1);

addpath /home/duttar/Desktop/GIT_projects/Fukuoka_project/Noor/GPS_D17pt_D246/bin_util/
hold on; 
faultsutm = FO_CrdTrans([fault1x';fault1y'],1); 

hold on;
for i = 1:numfaults
    if i == 1 
        frst = 1;
    else
        frst = indnan(i-1)+1; 
    end
    
    snd = indnan(i) - 1; 
    
    xfault = faultsutm(1,frst:snd); 
    yfault = faultsutm(2,frst:snd);     
    
    plot(xfault,yfault,'m','Linewidth',1.5); hold on;
end
    




















